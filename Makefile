#############################################################################
# Makefile for building: dclient2
# Generated by qmake (2.01a) (Qt 4.5.2) on: Fri Jan 1 22:17:33 2010
# Project:  dclient2.pro
# Template: app
# Command: /usr/bin/qmake -unix -o Makefile dclient2.pro
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = -DQT_NO_DEBUG -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED
CFLAGS        = -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)
CXXFLAGS      = -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)
INCPATH       = -I/usr/share/qt4/mkspecs/linux-g++ -I. -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtGui -I/usr/include/qt4 -I. -I.
LINK          = g++
LFLAGS        = -Wl,-O1
LIBS          = $(SUBLIBS)  -L/usr/lib -lQtGui -lQtCore -lpthread
AR            = ar cqs
RANLIB        = 
QMAKE         = /usr/bin/qmake
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -r
INSTALL_FILE  = install -m 644 -p
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = install -m 755 -p
DEL_FILE      = rm -f
SYMLINK       = ln -sf
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./obj

####### Files

SOURCES       = chardescwidget.cpp \
		charprofile.cpp \
		charstats.cpp \
		diceroller.cpp \
		interface.cpp \
		main.cpp \
		tabs.cpp \
		weapon.cpp \
		weaponlist.cpp \
		armor.cpp \
		spells.cpp \
		gear.cpp moc_chardescwidget.cpp \
		moc_charprofile.cpp \
		moc_charstats.cpp \
		moc_diceroller.cpp \
		moc_interface.cpp \
		moc_tabs.cpp \
		moc_weapon.cpp \
		moc_weaponlist.cpp \
		moc_armor.cpp \
		moc_spells.cpp \
		moc_gear.cpp
OBJECTS       = chardescwidget.o \
		charprofile.o \
		charstats.o \
		diceroller.o \
		interface.o \
		main.o \
		tabs.o \
		weapon.o \
		weaponlist.o \
		armor.o \
		spells.o \
		gear.o \
		moc_chardescwidget.o \
		moc_charprofile.o \
		moc_charstats.o \
		moc_diceroller.o \
		moc_interface.o \
		moc_tabs.o \
		moc_weapon.o \
		moc_weaponlist.o \
		moc_armor.o \
		moc_spells.o \
		moc_gear.o
DIST          = /usr/share/qt4/mkspecs/common/g++.conf \
		/usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/release.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		dclient2.pro
QMAKE_TARGET  = client
DESTDIR       = 
TARGET        = client

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(OBJECTS)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)

Makefile: dclient2.pro  /usr/share/qt4/mkspecs/linux-g++/qmake.conf /usr/share/qt4/mkspecs/common/g++.conf \
		/usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/release.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		/usr/lib/libQtGui.prl \
		/usr/lib/libQtCore.prl
	$(QMAKE) -unix -o Makefile dclient2.pro
/usr/share/qt4/mkspecs/common/g++.conf:
/usr/share/qt4/mkspecs/common/unix.conf:
/usr/share/qt4/mkspecs/common/linux.conf:
/usr/share/qt4/mkspecs/qconfig.pri:
/usr/share/qt4/mkspecs/features/qt_functions.prf:
/usr/share/qt4/mkspecs/features/qt_config.prf:
/usr/share/qt4/mkspecs/features/exclusive_builds.prf:
/usr/share/qt4/mkspecs/features/default_pre.prf:
/usr/share/qt4/mkspecs/features/release.prf:
/usr/share/qt4/mkspecs/features/default_post.prf:
/usr/share/qt4/mkspecs/features/warn_on.prf:
/usr/share/qt4/mkspecs/features/qt.prf:
/usr/share/qt4/mkspecs/features/unix/thread.prf:
/usr/share/qt4/mkspecs/features/moc.prf:
/usr/share/qt4/mkspecs/features/resources.prf:
/usr/share/qt4/mkspecs/features/uic.prf:
/usr/share/qt4/mkspecs/features/yacc.prf:
/usr/share/qt4/mkspecs/features/lex.prf:
/usr/share/qt4/mkspecs/features/include_source_dir.prf:
/usr/lib/libQtGui.prl:
/usr/lib/libQtCore.prl:
qmake:  FORCE
	@$(QMAKE) -unix -o Makefile dclient2.pro

dist: 
	@$(CHK_DIR_EXISTS) .tmp/dclient21.0.0 || $(MKDIR) .tmp/dclient21.0.0 
	$(COPY_FILE) --parents $(SOURCES) $(DIST) .tmp/dclient21.0.0/ && $(COPY_FILE) --parents chardescwidget.h charprofile.h charstats.h diceroller.h interface.h tabs.h weapon.h weaponlist.h armor.h spells.h gear.h .tmp/dclient21.0.0/ && $(COPY_FILE) --parents chardescwidget.cpp charprofile.cpp charstats.cpp diceroller.cpp interface.cpp main.cpp tabs.cpp weapon.cpp weaponlist.cpp armor.cpp spells.cpp gear.cpp .tmp/dclient21.0.0/ && (cd `dirname .tmp/dclient21.0.0` && $(TAR) dclient21.0.0.tar dclient21.0.0 && $(COMPRESS) dclient21.0.0.tar) && $(MOVE) `dirname .tmp/dclient21.0.0`/dclient21.0.0.tar.gz . && $(DEL_FILE) -r .tmp/dclient21.0.0


clean:compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) Makefile


mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all: moc_chardescwidget.cpp moc_charprofile.cpp moc_charstats.cpp moc_diceroller.cpp moc_interface.cpp moc_tabs.cpp moc_weapon.cpp moc_weaponlist.cpp moc_armor.cpp moc_spells.cpp moc_gear.cpp
compiler_moc_header_clean:
	-$(DEL_FILE) moc_chardescwidget.cpp moc_charprofile.cpp moc_charstats.cpp moc_diceroller.cpp moc_interface.cpp moc_tabs.cpp moc_weapon.cpp moc_weaponlist.cpp moc_armor.cpp moc_spells.cpp moc_gear.cpp
moc_chardescwidget.cpp: chardescwidget.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) chardescwidget.h -o moc_chardescwidget.cpp

moc_charprofile.cpp: chardescwidget.h \
		charprofile.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) charprofile.h -o moc_charprofile.cpp

moc_charstats.cpp: charstats.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) charstats.h -o moc_charstats.cpp

moc_diceroller.cpp: diceroller.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) diceroller.h -o moc_diceroller.cpp

moc_interface.cpp: tabs.h \
		chardescwidget.h \
		diceroller.h \
		charstats.h \
		charprofile.h \
		weaponlist.h \
		weapon.h \
		armor.h \
		interface.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) interface.h -o moc_interface.cpp

moc_tabs.cpp: chardescwidget.h \
		diceroller.h \
		charstats.h \
		charprofile.h \
		weaponlist.h \
		weapon.h \
		armor.h \
		tabs.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) tabs.h -o moc_tabs.cpp

moc_weapon.cpp: weapon.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) weapon.h -o moc_weapon.cpp

moc_weaponlist.cpp: weapon.h \
		weaponlist.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) weaponlist.h -o moc_weaponlist.cpp

moc_armor.cpp: armor.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) armor.h -o moc_armor.cpp

moc_spells.cpp: spells.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) spells.h -o moc_spells.cpp

moc_gear.cpp: gear.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) gear.h -o moc_gear.cpp

compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
	-$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all:
compiler_uic_clean:
compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: compiler_moc_header_clean 

####### Compile

chardescwidget.o: chardescwidget.cpp chardescwidget.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o chardescwidget.o chardescwidget.cpp

charprofile.o: charprofile.cpp charprofile.h \
		chardescwidget.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o charprofile.o charprofile.cpp

charstats.o: charstats.cpp charstats.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o charstats.o charstats.cpp

diceroller.o: diceroller.cpp diceroller.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o diceroller.o diceroller.cpp

interface.o: interface.cpp interface.h \
		tabs.h \
		chardescwidget.h \
		diceroller.h \
		charstats.h \
		charprofile.h \
		weaponlist.h \
		weapon.h \
		armor.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o interface.o interface.cpp

main.o: main.cpp interface.h \
		tabs.h \
		chardescwidget.h \
		diceroller.h \
		charstats.h \
		charprofile.h \
		weaponlist.h \
		weapon.h \
		armor.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o main.o main.cpp

tabs.o: tabs.cpp tabs.h \
		chardescwidget.h \
		diceroller.h \
		charstats.h \
		charprofile.h \
		weaponlist.h \
		weapon.h \
		armor.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o tabs.o tabs.cpp

weapon.o: weapon.cpp weapon.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o weapon.o weapon.cpp

weaponlist.o: weaponlist.cpp weaponlist.h \
		weapon.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o weaponlist.o weaponlist.cpp

armor.o: armor.cpp armor.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o armor.o armor.cpp

spells.o: spells.cpp spells.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o spells.o spells.cpp

gear.o: gear.cpp gear.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o gear.o gear.cpp

moc_chardescwidget.o: moc_chardescwidget.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_chardescwidget.o moc_chardescwidget.cpp

moc_charprofile.o: moc_charprofile.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_charprofile.o moc_charprofile.cpp

moc_charstats.o: moc_charstats.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_charstats.o moc_charstats.cpp

moc_diceroller.o: moc_diceroller.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_diceroller.o moc_diceroller.cpp

moc_interface.o: moc_interface.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_interface.o moc_interface.cpp

moc_tabs.o: moc_tabs.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_tabs.o moc_tabs.cpp

moc_weapon.o: moc_weapon.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_weapon.o moc_weapon.cpp

moc_weaponlist.o: moc_weaponlist.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_weaponlist.o moc_weaponlist.cpp

moc_armor.o: moc_armor.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_armor.o moc_armor.cpp

moc_spells.o: moc_spells.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_spells.o moc_spells.cpp

moc_gear.o: moc_gear.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_gear.o moc_gear.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

