Version
0.5.07022010

Dependencies
Qt 4.5

Author
Dane Larsen

Email
dane.t.larsen@gmail.com

*******************************************************************
*                           About                                 *
*******************************************************************
Dungeon Client is an application geared towards simplicity of D&D character setup, which typically takes quite a long time, and can detract from the experience of a onetime campaign. This is accomplished by a moderate amount of automation, but not enough to remove control from the player/DM. This automation allows for speedy character creation by removing the need to constantly refer to the Player's Handbook.But remember: There is nothing like rolling two handfulls of d6's.


*******************************************************************
*                           License                               *
*******************************************************************

Dungeon Client - An application geared towards making D&D character 
setup and use easier.
Copyright (C) 2010 Dane T Larsen 

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

A copy of the GNU General Public License can be found in the file
COPYING, distributed with the source of this program, or it can be
read at: http://www.gnu.org/licenses/gpl.html
    
You can contact the author at dane.t.larsen@gmail.com

********************************************************************
********************************************************************

Note about the general structure of the program:

The Interface widget contains the Tabs widget which in turn contains
each of the widgets that go in the tabs. When load is called
the filename is gotten from the user via Interface, and given to Tabs.
Tabs opens the file and gets the relevant QByteArrays containing hashes
Tabs then gives each tab its respective QByteArray, and the tab does the 
rest of the processing. Save works the same, but in reverse.

